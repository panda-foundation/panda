/// document for this namespace
/** no protected type, under same namespace 
can access none-public fields. they will all
be presented as struct in c++ (no class) 
**/
namespace test.sample;

// these comments will be ignored
/* normal comments */
include serializer.json;
include network.*;

/// document for declarartions
/** also document **/
public var a, b : int;
public const c : string = "hellow world";

// global function
function do_nothing() // void return type can be ommited
{
}

// simple class
public class empty
{
    public function new()
    {
    }

    public function destroy()
    {
    }
}

// interface define, must have something
public interface must_do
{
    print() void; // void can be ommited
}

// enum define // private default
enum color
{
    red;
    green = 10;
    blue;
}

// more enum
enum more_color : color
{
    yellow;
}

// base class ("base" is keyword)
public class base_class
{
    // private member
    value_ : int = 0;

    // private constructor
    function new(value : int)
    {
        value_ = value;
    }

    // also constructor
    function new()
    {
        value_ = 10;
    }
}

// derived class
public class derive_class : base_class, must_do
{
    public function new()
    {
        base.new();
    }

    public function new(value : int)
    {
        base.new(value);
    }

    // all function will be virtual, can be override
    public function print()
    {
        base.print();
    }
}

// generic
public class generic<K, V>
{
    var k_ : K;
    var v_ : V;

    public function new(k : K, v : V)
    {
        k_ = k;
        v_ = v;
    }
}

// derive from generic
public class derive_generic : generic<int, int>
{

}

// program entry
function main()
{
    var a : int = 1;
    var b : int = 2;
    var c = a + b;
    print(c);

    var b : base_class = new base_class();
    b.print();

    var d : derive_class = new derive_class;
    d.print();

    var g ï¼š generic<int, int> = new generic(1, 2);
    g.print();

    // return 0 // will be added automatically
}