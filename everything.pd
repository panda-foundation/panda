@doc "all types elements of panda language"
package main;

/*
import "system";
import net "network";
*/

const b bool = true;

const c char = 'a'; // alias u32 //TO-DO

var sbyte_v sbyte = 1; // alias i8
var short_v short = 0; // alias i16
var int_v int; // alias i32
var long_v long; // alias i64
var int8_v i8;
var int16_v i16;
var int32_v i32;
var int64_v i64;

var byte_v byte; // alias u8
var ushort_v ushort; // alias u16
var uint_v uint; // alias u32
var ulong_v ulong; // alias u64
var uint8_v u8;
var uint16_v u16;
var uint32_v u32;
var uint64_v u64;

var float_v float; // alias f32
var double_v double; // alias f64
var f32_v f32;
var f64_v f64;

var string_v string = "hello world\n";

@doc "programe entry"
public function main() int
{
    print(add(1, 1));
    return 0;
}

@doc "print varable to console; void return type can be ommited"
function print<T>(&t T) 
{
    @emit `std::cout << t << std::endl;`
}

@doc "sample function"
function add(a, b int) int
{
    return a + b;
}

//@doc scalar cast

//@doc all operators


/*
await result

public class empty
{
    public function new()
    {
    }

    public function destroy()
    {
    }
}

public interface must_do
{
    print() void; // void can be ommited
}

enum color
{
    red;
    green = 10;
    blue;
}

enum more_color : color
{
    yellow;
}

public class base_class
{
    // private member
    value_ : int = 0;

    // private constructor
    function new(value : int)
    {
        value_ = value;
    }

    // also constructor
    function new()
    {
        value_ = 10;
    }
}

public class derive_class : base_class, must_do
{
    public function new()
    {
        base.new();
    }

    public function new(value : int)
    {
        base.new(value);
    }

    // all function will be virtual, can be override
    public function print()
    {
        base.print();
    }
}

public class generic<K, V>
{
    var k_ : K;
    var v_ : V;

    public function new(k : K, v : V)
    {
        k_ = k;
        v_ = v;
    }
}

public class derive_generic : generic<int, int>
{

}

function main()
{
    var a : int = 1;
    var b : int = 2;
    var c = a + b;
    print(c);

    var b : base_class = new base_class();
    b.print();

    var d : derive_class = new derive_class;
    d.print();

    var g ï¼š generic<int, int> = new generic(1, 2);
    g.print();
    
}
*/