#if cpp
@cpp(include = "<cstddef>")
@cpp(include = "<memory>")
namespace;

public class vector<type>
{
    var start @"type*" = null;
    var end @"type*" = null;
    var cap @"type*" = null;
    var allocator @"std::allocator<type>";

    public function vector(count int)
    {
        @`start = allocator.allocate(count);
        end = start + count`
    }

    public function ~vector()
    {
        free();
    }

    public function __get(position int) type
    {
        @`if (start + position >= end)
        {
            throw std::runtime_error("out of range");
        }
        return *(start + position)`
    }

    public function __set(position int, value type) type
    {
        @`if (start + position >= end)
        {
            throw std::runtime_error("out of range");
        }
        *(start + position) = value;
        return *(start + position)`
    }
  
    public function size() int
    {
        @"return end - start"
    }

    /*
    public function resize(size int);

    public function capacity() int;

    public function empty() bool;

    public function reserve(size int);

    public function shrink();

    public function front() type;

    public function back() type;

    public function fill(size int, value type);
    */

    public function push(value type)
    {
        @`check_cap();
        allocator.construct(end, value);
        end++`;
    }

    public function pop() type
    {
        @`if (end - start > 0)
        {
            auto value = *end;
            allocator.destroy(end);
            end--;
            return value;
        }
        throw std::runtime_error("no element to pop")`
    }
    /*
    public function insert(position int, value type);

    public function erase(position int);

    public function clear();*/

    function check_cap()
    {
        @`if (end == cap)
        {
            int new_size = size() ? size() << 1 : 1;
            auto new_start = allocator.allocate(new_size);
            auto new_end = std::uninitialized_copy(std::make_move_iterator(start), std::make_move_iterator(end), new_start);
            free();
            start = new_start;
            end = new_end;
            cap = new_start + new_size;
        }`
    }

    function free()
    {
        @`if (startptr)
        {
            for (auto p = start; p != end; p++)
            {
                allocator.destroy(p);
            }
            allocator.deallocate(start, end - start);
        }`
    }
}
#end