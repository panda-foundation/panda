namespace collection;

@cpp(include = "<vector>")

public class vector<type> : std.vector
{
    @cpp(reference = "size")
    public function size() int;

    @cpp(reference = "resize")
    public function resize(size int);

    @cpp(reference = "capacity")
    public function capacity() int;

    @cpp(reference = "empty")
    public function empty() bool;

    @cpp(reference = "reserve")
    public function reserve(size int);

    @cpp(reference = "shrink_to_fit")
    public function shrink();

    @cpp(reference = "operator[]" operator = "[]")
    public function operator(position int) type;

    @cpp(reference = "at")
    public function at(position int) type;
    
    @cpp(reference = "front")
    public function front() type;
    
    @cpp(reference = "back")
    public function back() type;

    @cpp(reference = "assign")
    public function fill(size int, value type);
    
    @cpp(reference = "push_back")
    public function push(value type);

    @cpp(reference = "pop_back")
    public function pop();

    public inline function insert(position int, value type)
    {
        @cpp("std::vector::insert(std::vector::begin() + position, value))")
    }

    @cpp(reference = "erase")
    public function erase(position int);

    @cpp(reference = "clear")
    public function clear();
}