namespace;

import libc;

class counter
{
    var shared_ref int;
    var weak_ref int;
    var object pointer;
    var destructor function(pointer);

    function create()
    {
        libc.puts("create counter");
    }
    
    function retain_shared()
    {
        this.shared_ref++;
        libc.printf("retain shared: %d \n", this.shared_ref);
    }
    
    function release_shared()
    {
        if (this == null) return;

        this.shared_ref--;
        libc.printf("release shared: %d \n", this.shared_ref);
        if (this.shared_ref == 0)
        {
            this.destructor(this.object);
            libc.printf("free object %p \n", this.object);
            libc.free(this.object);

            this.object = null;
            if (this.weak_ref == 0)
            {
                libc.printf("free counter %p \n", this);
                libc.free(this);
            }
        }
    }

    function retain_weak()
    {
        this.weak_ref++;
        libc.printf("retain weak: %d \n", this.weak_ref);
    }
    
    function release_weak()
    {
        if (this == null) return;

        this.weak_ref--;
        libc.printf("release weak: %d \n", this.weak_ref);
        if (this.shared_ref == 0 && this.weak_ref == 0)
        {
            libc.printf("free counter %p \n", this);
            libc.free(this);
        }
    }

    function destroy()
    {
        libc.free(this);
        libc.puts("destroy counter");
    }
}