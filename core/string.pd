namespace;

import libc;

public class string
{
    var text_size int;
    var address pointer;

    function create()
    {
        libc.puts("create string");
    }

    public function raw() pointer
    {
        return this.address;
    }

    public function size() int
    {
        return this.text_size;
    }

    public function assign(ref value string)
    {
        libc.free(this);
        var size int = value.size();
        this.text_size = size;
        this.address = libc.malloc(this.text_size + 1);
        libc.memcpy(this.address, value.raw(), size);
    }

    public function plus(ref value string) string
    {
        var new_value string;
        var new_size int = this.text_size + value.size() + 1;
        var new_address pointer = libc.malloc(new_size);
        libc.memcpy(new_address, this.address, this.text_size + 1);
        var second_address pointer = pointer_offset(new_address, this.text_size);
        libc.memcpy(second_address, value.raw(), value.size() + 1);
        return new_value;
    }

    public function plus_assign(ref value string)
    {
        //TO-DO
    }

    public function compare(ref value string) int
    {
        //TO-DO
        return 0;
    }

    function destroy()
    {
        libc.free(this);
        libc.puts("destroy string");
    }
}